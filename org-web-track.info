This is org-web-track.info, produced by .texi2any-real version 7.1.1
from org-web-track.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Org Web Track: (org-web-track). Web data tracking framework in Org Mode.
END-INFO-DIR-ENTRY


File: org-web-track.info,  Node: Top,  Next: Overview,  Up: (dir)

org-web-track.el - Web data tracking framework in Org Mode
**********************************************************

‘org-web-track’ provides an Org Mode framework that assists users in
managing their values of interest on a website or via a Web API

* Menu:

* Overview::
* Installation::
* Basic Usage::
* Extended Examples::
* Q&A::
* License::

-- The Detailed Node Listing --

Overview

* Retrieving data::

Basic Usage

* Defining Tracking Items::
* Updating Values::
* Displaying Column View::
* Creating Report::

Defining Tracking Items

* Sending Additional HTTP Headers::
* Dealing with Dinamic Website::
* Accessing Unix Domain Socket Server::

Extended Examples

* Automatic Bulk Updating and Email Notifications::

Q&A

* Network Certificate Issue::



File: org-web-track.info,  Node: Overview,  Next: Installation,  Prev: Top,  Up: Top

Overview
********

With ‘org-web-track’, users can:
   • Track targeted values that fluctuate over time.
   • Manage the history of values in Org Mode
   • Overview a series of tracking items displayed in a Org Column View
   • Take advantage of the history to plot a graph (for example)

* Menu:

* Retrieving data::


File: org-web-track.info,  Node: Retrieving data,  Up: Overview

Retrieving data
===============

When users specify which snippet of data to track on web pages or web
APIs, the following methods are available:

   • CSS selectors, which are applied against the source code of the web
     page
   • Elisp functions, which receive a DOM object or a JSON object from a
     web page or a web API and are expected to return a desired value
     from the argument
   • Shell commands, which take a page source or an API response as
     STDIN and are expected to print a desired value to STDOUT


File: org-web-track.info,  Node: Installation,  Next: Basic Usage,  Prev: Overview,  Up: Top

Installation
************

‘org-web-track’ can be installed directly from MELPA using
‘package-install’.  Please note that the following packages are
required.

   Requirements:
   • Emacs 29.1 or higher
   • request.el (https://github.com/tkf/emacs-request) v0.3.2
   • enlive (https://github.com/zweifisch/enlive) v0.0.1


File: org-web-track.info,  Node: Basic Usage,  Next: Extended Examples,  Prev: Installation,  Up: Top

Basic Usage
***********

In this section, the basic ‘org-web-track’ mechanism and fundamental
command usage are described.

* Menu:

* Defining Tracking Items::
* Updating Values::
* Displaying Column View::
* Creating Report::


File: org-web-track.info,  Node: Defining Tracking Items,  Next: Updating Values,  Up: Basic Usage

Defining Tracking Items
=======================

Before setting up each tracking item, users need to define
‘org-web-track-selectors-alist’, which is a list of lists consisting of
URL-MATCH and SELECTOR.  Each element is responsible for selecting data
for the tracking item that has a URL matching against URL-MATCH and
applying SELECTOR to the response.  An example of
‘org-web-track-selectors-alist’ is as follows:

   (setq org-web-track-selectors-alist '(("example\\.com/product"
[.final-price])))

   The above code means that the target value for all product items,
which have a URL containing "example.com/product", can be obtained from
the HTML response by searching in the tag with a class attribute of
"final-price".  Refer to the description of
‘org-web-track-selectors-alist’ for detailed guidance on how to define
the SELECTOR.

   After appropriately defining ‘org-web-track-selectors-alist’, users
can set up each specific tracking item by calling
‘org-web-track-setup-entry’ on the desired org entry or before the first
heading to create a new one in the org buffer.  Users will be prompted
to input the tracking URL, and then the updated value will be retrieved,
stored, and displayed in the echo area according to the aforementioned
settings.

     * Book ABC
     :PROPERTIES:
     :TRACK_URL: https://example.com/products/book-abc.html
     :TRACK_CURRENT_VALUE: $30
     :TRACK_LAST_UPDATED_TIME: [2024-07-18 Thu 16:57]
     :END:
     :LOGBOOK:
     - Update "$30"       [2024-07-18 Thu 16:57]
     :END:

* Menu:

* Sending Additional HTTP Headers::
* Dealing with Dinamic Website::
* Accessing Unix Domain Socket Server::


File: org-web-track.info,  Node: Sending Additional HTTP Headers,  Next: Dealing with Dinamic Website,  Up: Defining Tracking Items

Sending Additional HTTP Headers
-------------------------------

In an HTTP request message, a client can include a set of information
known as an HTTP header, each element presented in a key-value pair
format.  This allows the client to send metadata to the server for
various purposes, such as authentication or user identification.

   In ‘org-web-track’, users can specify HTTP headers in a couple of
ways.  First, they can set a variable
‘org-web-track-default-http-headers’ that is applied to every HTTP
request.  Second, they can execute a command
‘org-web-track-set-http-headers’ that sets specific HTTP headers for
individual entries.


File: org-web-track.info,  Node: Dealing with Dinamic Website,  Next: Accessing Unix Domain Socket Server,  Prev: Sending Additional HTTP Headers,  Up: Defining Tracking Items

Dealing with Dinamic Website
----------------------------

The HTTP request backend of org-web-track, either cURL or url-retrieve,
lacks the ability to read a dynamic website like a JS-rendered page.  To
work around this issue, org-web-track employs a delegation mechanism for
fetching content.  CONTENT-FETCHER in the
org-web-track-content-fetcher-alist is used for this purpose.  Users are
free to implement any procedure using libraries such as Selenium or
WebDriver in it.


File: org-web-track.info,  Node: Accessing Unix Domain Socket Server,  Prev: Dealing with Dinamic Website,  Up: Defining Tracking Items

Accessing Unix Domain Socket Server
-----------------------------------

While org-web-track primarily focuses on the WWW server as the access
target, users also have the option to connect to a Unix Domain Socket
server, which provides HTTP services mainly on a local machine.  A
simple example of a Unix Socket server implementation complying with the
org-web-track framework can be found at
<https://github.com/p-snow/socket-http-server>.  Using this feature,
non-HTTP services, such as Unix shell commands, can be effectively
utilized within the org-web-track framework.

   Users who want to access the Unix Domain Socket server must set the
socket's path by calling org-web-track-set-unix-socket at the desired
tracking item.  When this feature is active, the value of the variable
org-web-track-use-curl will not be respected.  The cURL program will
implicitly be used as the fetching backend since url-retrieve cannot
access the Unix Socket Server.


File: org-web-track.info,  Node: Updating Values,  Next: Displaying Column View,  Prev: Defining Tracking Items,  Up: Basic Usage

Updating Values
===============

The simplest way to update the value is to call
‘org-web-track-update-entry’ on the desired org entry.  If the retrieved
value is updated compared to the last value, the updated value will be
stored as the TRACK_CURRENT_VALUE org property; otherwise, the entry
will remain unchanged.

   Alternatively, bulk updating is supported.  To enable bulk updating,
users must first define ‘org-web-track-files’.  This variable should be
a list of files in which all tracking items, identified by having the
TRACK_URL property, are selected for bulk updating.  To perform bulk
updating, call ‘org-web-track-update-files’.


File: org-web-track.info,  Node: Displaying Column View,  Next: Creating Report,  Prev: Updating Values,  Up: Basic Usage

Displaying Column View
======================

Column view in org-mode is a feature that displays properties in a
table, providing a clear and comprehensive perspective.  ‘org-web-track’
offers a specialized column view where updated values are juxtaposed
with their previous values for tracking items.  To display the column
view, call ‘org-web-track-columns’ in org buffer.

   If tracking items are scattered across many files,
‘org-web-track-agenda-columns’ is useful as all tracking items in the
aforementioned ‘org-web-track-files’ are gathered in the agenda column
view.  Users can also update any item in the agenda column view by
calling ‘org-web-track-agenda-update’.


File: org-web-track.info,  Node: Creating Report,  Prev: Displaying Column View,  Up: Basic Usage

Creating Report
===============

All updated values from the past are logged in the entry using the
existing org log note feature.  Log notes have a fixed format and are
placed in a drawer only if ‘org-log-into-drawer’ is non-nil.

   ‘org-web-track-report’ creates a table where all log note values are
listed in ascending order of time, showing the transition of values over
time.  Users can utilize the table to create a graph using Gnuplot or
analyze trends with Pandas, for example.


File: org-web-track.info,  Node: Extended Examples,  Next: Q&A,  Prev: Basic Usage,  Up: Top

Extended Examples
*****************

In this section, examples of how to utilize ‘org-web-track’ extensively
are showcased.

* Menu:

* Automatic Bulk Updating and Email Notifications::


File: org-web-track.info,  Node: Automatic Bulk Updating and Email Notifications,  Up: Extended Examples

Automatic Bulk Updating and Email Notifications
===============================================

While automatic updating may be ideal in certain situations,
‘org-web-track’ refrains from providing this feature directly to prevent
potential data violations.  However, users can enable automatic updating
by calling ‘org-web-track-update-entry’ or ‘org-web-track-update-files’
from Elisp code.  Below is an example implementation of automatic
updates with email notifications scheduled for midnight.

     (defun exp/email-updated ()
       "Check for updates on all tracking items in `org-web-track-files'
     and email me the updated list of items formatted as requested."
       (let* ((message-kill-buffer-on-exit t)
              (mail-msg (mapconcat
                         (lambda (chg)
                           (org-with-point-at chg
                             (let ((org-trust-scanner-tags t))
                               (format "%s\n\t%s\n"
                                       (substring-no-properties
                                        (org-get-heading t t t t))
                                       (org-web-track-current-changes nil "%p => %c" " | ")))))
                         (org-web-track-update-files))))
         (unless (string-blank-p mail-msg)
           ;; SMTP settings are required in advance (see smtpmail-xxx vaiables)
           (message-mail user-mail-address "Web Tracking Notification")
           (message-goto-body)
           (insert mail-msg)
           (message-send-and-exit))))

     (require 'midnight)
     (add-hook 'midnight-hook #'exp/email-updated)
     (midnight-mode 1)


File: org-web-track.info,  Node: Q&A,  Next: License,  Prev: Extended Examples,  Up: Top

Q&A
***

* Menu:

* Network Certificate Issue::


File: org-web-track.info,  Node: Network Certificate Issue,  Up: Q&A

Network Certificate Issue
=========================

Non-interactive invocation for org-web-track-update-entry may fail due
to an unverified network certificate.  This issue can occur when
accessing a website that offers an unverified certificate, and the
variable network-security-level is set to 'medium' or higher.  To
address the issue, accept the certificate by calling the
org-web-track-update-entry command interactively up-front.


File: org-web-track.info,  Node: License,  Prev: Q&A,  Up: Top

License
*******

GPLv3



Tag Table:
Node: Top234
Node: Overview1075
Node: Retrieving data1494
Node: Installation2095
Node: Basic Usage2529
Node: Defining Tracking Items2867
Node: Sending Additional HTTP Headers4636
Node: Dealing with Dinamic Website5428
Node: Accessing Unix Domain Socket Server6085
Node: Updating Values7181
Node: Displaying Column View7973
Node: Creating Report8797
Node: Extended Examples9395
Node: Automatic Bulk Updating and Email Notifications9682
Node: Q&A11440
Node: Network Certificate Issue11581
Node: License12092

End Tag Table


Local Variables:
coding: utf-8
End:
