\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename org-web-track.info
@settitle org-web-track.el - Web data tracking framework in Org Mode
@documentencoding UTF-8
@documentlanguage ja
@set MAINTAINERSITE @uref{https://github.com/p-snow/org-web-track,website}
@set MAINTAINER p-snow
@c %**end of header

@dircategory Emacs
@direntry
* Org Web Track: (org-web-track). Web data tracking framework in Org Mode.
@end direntry

@finalout
@titlepage
@title org-web-track.el - Web data tracking framework in Org Mode
@end titlepage

@ifnottex
@node Top
@top org-web-track.el - Web data tracking framework in Org Mode

@insertcopying

@samp{org-web-track} provides an @samp{org-mode} framework that helps users track, manage, and leverage data such as scores, prices, or states from web pages and web APIs.

@end ifnottex

@menu
* Overview::
* Installation::
* Basic Usage::
* Extended Examples::
* Q&A::
* License::

@detailmenu
--- The Detailed Node Listing ---

Overview

* Retrieving data::

Basic Usage

* Defining Tracking Items::
* Updating Values::
* Displaying Column View::
* Creating Report::

Defining Tracking Items

* Accessing Unix Domain Socket Server::

Extended Examples

* Automatic Bulk Updating and Email Notifications::

Q&A

* Network Certificate Issue::

@end detailmenu
@end menu

@node Overview
@unnumbered Overview

With @samp{org-web-track} users can:

@itemize
@item
Define a tracking item as an @samp{org-mode} entry with a URL and selector, which indicate where to access and from which location to obtain the desired data, respectively.
@item
Update tracking items at any time and check their value.
@item
Manage a group of tracking items using the @samp{org-mode} column view capability.
@item
Take advantage of data logs, which are provided as an @samp{org-mode} table, to create a value transitive graph, for example.
@end itemize

@menu
* Retrieving data::
@end menu

@node Retrieving data
@unnumberedsec Retrieving data

When users specify which snippet of data to track on web pages or web APIs, the following methods are available:

@itemize
@item
CSS selectors, which are applied against the source code of the web page
@item
Elisp functions, which receive a DOM object or a JSON object from a web page or a web API and are expected to return a desired value from the argument
@item
Shell commands, which take a page source or an API response as STDIN and are expected to print a desired value to STDOUT
@end itemize

@node Installation
@unnumbered Installation

@samp{org-web-track} can be installed directly from MELPA using @samp{package-install}. Please note that the following packages are required.

Requirements:
@itemize
@item
Emacs 29.1 or higher
@item
@uref{https://github.com/tkf/emacs-request, request.el} v0.3.2
@item
@uref{https://github.com/zweifisch/enlive, enlive} v0.0.1
@end itemize

@node Basic Usage
@unnumbered Basic Usage

In this section, the basic @samp{org-web-track} mechanism and fundamental command usage are described.

@menu
* Defining Tracking Items::
* Updating Values::
* Displaying Column View::
* Creating Report::
@end menu

@node Defining Tracking Items
@unnumberedsec Defining Tracking Items

Before setting up each tracking item, users need to define @samp{org-web-track-selectors-alist}, which is a list of lists consisting of URL-MATCH and SELECTOR@. Each element is responsible for selecting data for the tracking item that has a URL matching against URL-MATCH and applying SELECTOR to the response. An example of @samp{org-web-track-selectors-alist} is as follows:

@findex org-web-track-selectors-alist
(setq org-web-track-selectors-alist '(("example\\.com/product" [.final-price])))

The above code means that the target value for all product items, which have a URL containing "example.com/product", can be obtained from the HTML response by searching in the tag with a class attribute of "final-price". Refer to the description of @samp{org-web-track-selectors-alist} for detailed guidance on how to define the SELECTOR@.

Users can also use @samp{org-web-track-test-selector} function to create and/or verify a selector for the specific URL before configuring @samp{org-web-track-selectors-alist}.

After appropriately defining @samp{org-web-track-selectors-alist}, users can set up each specific tracking item by calling @samp{org-web-track-setup-entry} on the desired org entry or before the first heading to create a new one in the org buffer. Users will be prompted to input the tracking URL, and then the updated value will be retrieved, stored, and displayed in the echo area according to the aforementioned settings.

@example
* Book ABC
:PROPERTIES:
:TRACK_URL: https://example.com/products/book-abc.html
:TRACK_CURRENT_VALUE: $30
:TRACK_LAST_UPDATED_TIME: [2024-07-18 Thu 16:57]
:END:
:LOGBOOK:
- Update "$30"       [2024-07-18 Thu 16:57]
:END:
@end example

@menu
* Accessing Unix Domain Socket Server::
@end menu

@node Accessing Unix Domain Socket Server
@unnumberedsubsec Accessing Unix Domain Socket Server

While org-web-track primarily focuses on the WWW server as the access target, users also have the option to connect to a Unix Domain Socket server that provides HTTP services on a local machine. A simple example of a Unix Socket server implementation complying with the org-web-track framework can be found at @uref{https://github.com/p-snow/socket-http-server}.

@node Updating Values
@unnumberedsec Updating Values

The simplest way to update the value is to call @samp{org-web-track-update-entry} on the desired org entry. If the retrieved value is updated compared to the last value, the updated value will be stored as the TRACK_CURRENT_VALUE org property; otherwise, the entry will remain unchanged.

Alternatively, bulk updating is supported. To enable bulk updating, users must first define @samp{org-web-track-files}. This variable should be a list of files in which all tracking items, identified by having the TRACK_URL property, are selected for bulk updating. To perform bulk updating, call @samp{org-web-track-update-files}.

@node Displaying Column View
@unnumberedsec Displaying Column View

Column view in org-mode is a feature that displays properties in a table, providing a clear and comprehensive perspective. @samp{org-web-track} offers a specialized column view where updated values are juxtaposed with their previous values for tracking items. To display the column view, call @samp{org-web-track-columns} in org buffer.

If tracking items are scattered across many files, @samp{org-web-track-agenda-columns} is useful as all tracking items in the aforementioned @samp{org-web-track-files} are gathered in the agenda column view. Users can also update any item in the agenda column view by calling @samp{org-web-track-agenda-update}.

@node Creating Report
@unnumberedsec Creating Report

All updated values from the past are logged in the entry using the existing org log note feature. Log notes have a fixed format and are placed in a drawer only if @samp{org-log-into-drawer} is non-nil.

@samp{org-web-track-report} creates a table where all log note values are listed in ascending order of time, showing the transition of values over time. Users can utilize the table to create a graph using Gnuplot or analyze trends with Pandas, for example.

@node Extended Examples
@unnumbered Extended Examples

In this section, examples of how to utilize @samp{org-web-track} extensively are showcased.

@menu
* Automatic Bulk Updating and Email Notifications::
@end menu

@node Automatic Bulk Updating and Email Notifications
@unnumberedsec Automatic Bulk Updating and Email Notifications

While automatic updating may be ideal in certain situations, @samp{org-web-track} refrains from providing this feature directly to prevent potential data violations. However, users can enable automatic updating by calling @samp{org-web-track-update-entry} or @samp{org-web-track-update-files} from Elisp code. Below is an example implementation of automatic updates with email notifications scheduled for midnight.

@lisp
(defun exp/email-updated ()
  "Check for updates on all tracking items in `org-web-track-files'
and email me the updated list of items formatted as requested."
  (let* ((message-kill-buffer-on-exit t)
         (mail-msg (mapconcat
                    (lambda (chg)
                      (org-with-point-at chg
                        (let ((org-trust-scanner-tags t))
                          (format "%s\n\t%s\n"
                                  (substring-no-properties
                                   (org-get-heading t t t t))
                                  (org-web-track-current-changes nil "%p => %c" " | ")))))
                    (org-web-track-update-files))))
    (unless (string-blank-p mail-msg)
      ;; SMTP settings are required in advance (see smtpmail-xxx vaiables)
      (message-mail user-mail-address "Web Tracking Notification")
      (message-goto-body)
      (insert mail-msg)
      (message-send-and-exit))))

(require 'midnight)
(add-hook 'midnight-hook #'exp/email-updated)
(midnight-mode 1)
@end lisp

@node Q&A
@unnumbered Q&A

@menu
* Network Certificate Issue::
@end menu

@node Network Certificate Issue
@unnumberedsec Network Certificate Issue

Non-interactive invocation for org-web-track-update-entry may fail due to an unverified network certificate. This issue can occur when accessing a website that offers an unverified certificate, and the variable network-security-level is set to 'medium' or higher. To address the issue, accept the certificate by calling the org-web-track-update-entry command interactively up-front.

@node License
@unnumbered License

GPLv3

@bye
